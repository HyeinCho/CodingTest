#include <string>
#include <vector>
#include <unordered_map>

using namespace std;

unordered_map<string, int> m = { {"ja",4}, {"py",6}, {"cp",3}, {"ba",7}, {"fr",8}, {"ju",6}, {"se",6}, {"pi",5}, {"ch",7}, {"- ",1} };

vector<string> splitInfo(string s) {
    vector<string> people;
    for (int i = 0; i < s.size(); i++) {
        string subString = s.substr(i, 2);
        if (m.find(subString) != m.end()) {
            people.push_back(subString);
            i += m[subString];
        }
        else {
            people.push_back(s.substr(i));
            break;
        }
    }
    return people;
}

vector<string> splitQuery(string s) {
    vector<string> q;

    for (int i = 0; i < s.size(); i++) {
        string subString = s.substr(i, 2);
        if (subString == "an") {
            i += 3;
        }
        else if (m.find(subString) != m.end()) {
            q.push_back(subString);
            i += m[subString];
        }
        else {
            q.push_back(s.substr(i));
            break;
        }
    }
    return q;
}

vector<int> solution(vector<string> info, vector<string> query) {
    vector<int> answer(query.size(), 0);

    vector<vector<string>> infoAll(info.size());
    for (int i = 0; i < info.size(); i++) {
        infoAll[i] = splitInfo(info[i]);
    }

    vector<string> check;
    for (int i = 0; i < query.size(); i++) {
        check = splitQuery(query[i]);
        for (vector<string> people : infoAll) {
            for (int j = 0; j < 5; j++) {
                if (j == 4) {
                    if (stoi(people[j]) >= stoi(check[j])) answer[i]++;
                }
                else if (check[j] == "- ") continue;
                else if (people[j] != check[j]) break;
            }
        }
    }

    return answer;
}
